<!DOCTYPE html>
<html>

<head>
  <title>HKBU Event Management System</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
  <%/* <meta name="robots" content="noindex"> */%>


  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <!--STYLES END-->
  <link rel="stylesheet" href="https://unpkg.com/buefy/dist/buefy.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font@5.8.55/css/materialdesignicons.min.css">
</head>

<body>
  <section class="section">
    <div class="container ">

      <div class="columns is-centered">

        <div class="column is-full">
          <div id="app1">
            <nav class="navbar" role="navigation" aria-label="main navigation">
              <div class="navbar-brand ">
                <a class="navbar-item" href="https://bulma.io">
                  <img src="https://raw.githubusercontent.com/buefy/buefy/dev/static/img/buefy-logo.png">
                </a>

                <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false"
                  data-target="navbarBasicExample">
                  <span aria-hidden="true"></span>
                  <span aria-hidden="true"></span>
                  <span aria-hidden="true"></span>
                </a>
              </div>

              <div id="navbarBasicExample" class="navbar-menu">
                <div class="navbar-start">
                  <a class="navbar-item" onclick="window.location.href='/'">
                    Home
                  </a>

                  <a class="navbar-item" onclick="window.location.href='/person/search'">
                    Search
                  </a>

                  <a class="navbar-item" id="create" v-if="role === 'admin'"
                    onclick="window.location.href='/person/create'">
                    Create
                  </a>

                  <a class="navbar-item" id="admin" v-if="role === 'admin'"
                    onclick="window.location.href='/person/admin'">
                    Admin
                  </a>

                  <a class="navbar-item" id="regisEvents" v-if="role === 'students'"
                    onclick="window.location.href='/user/registeredEvents'">
                    My Registered Events
                  </a>
                </div>

                <div class="navbar-end">
                  <div class="navbar-item">
                    <div class="buttons">
                      <button type="submit"  id="login" class="button is-primary" v-if="role === ''"
                        onclick="window.location.href='/user/login'"> Log
                        in</button>
                        <button type="submit"  id="name" class="button is-primary" v-else
                        > {{username}} </button>
                      <form method="POST" action="/user/logout">
                        <button type="submit" class="button is-primary is-light" v-if="role != ''"> Log out</button>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            </nav>
          </div>
          <div class="block">
            <section class="hero is-link">
              <div class="hero-body">
                <p class="title">
                  Event Management System
                </p>
                <p class="subtitle">
                  HKBU Event Management System is web-based system for department and student societies to broadcast
                  events and activities as well as registration.
                </p>
              </div>
            </section>
          </div>

          <%- body %>

        </div>
      </div>

    </div>
  </section>

  <script src="https://unpkg.com/vue"></script>
  <!-- Full bundle -->
  <script src="https://unpkg.com/buefy/dist/buefy.min.js"></script>

  <!-- Individual components -->
  <script src="https://unpkg.com/buefy/dist/components/table"></script>
  <script src="https://unpkg.com/buefy/dist/components/input"></script>

  <script>
    new Vue({
      el: '#app1',
      data: {
        role: "<%= req.session.role %>",
        username: "<%= req.session.username %>"
      },
    })
  </script>




  <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

  <!--TEMPLATES-->
  <!--TEMPLATES END-->


  <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


  <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

  <!--SCRIPTS-->
  <script src="/dependencies/sails.io.js"></script>
  <!--SCRIPTS END-->
  <script defer src="https://use.fontawesome.com/releases/v5.10.0/js/all.js"></script>
</body>

</html>